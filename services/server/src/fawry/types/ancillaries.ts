import { FawryStatusCode } from "@/fawry/types/errors";
// eslint-disable-next-line @typescript-eslint/no-unused-vars
import type { forPaymentDetails } from "@/fawry/lib/signature";

export type PaymentMethod = "PAYATFAWRY" | "MWALLET" | "CARD" | "Mobile Wallet";

export type CurrencyCode = "EGP";

export type Language = "ar-eg";

export type OrderStatus =
  | "NEW"
  | "UNPAID"
  | "PAID"
  | "CANCELED"
  | "REFUNDED"
  | "EXPIRED"
  | "PARTIAL_REFUNDED"
  | "FAILED";

export enum VerStatus {
  CARD_AUTHENTICATED = "Y",
  CARD_HOLDER_NOT_ENROLLED = "E",
  CARD_HOLDER_NOT_VERIFIED = "N",
  ISSUER_SYSTEM_ERROR = "U",
  BAD_REQUEST = "F",
  AUTHENTICATION_FAILED = "A",
  CONNECTION_ERROR = "D",
  CARD_NOT_SUPPORTED = "C",
  CANCELED = "M",
  VALIDATION_ERROR = "S",
  TIMEOUT_ERROR = "T",
  PARSING_INPUT_ERROR = "P",
  INTERNAL_SERVER_ERROR = "I",
}

export type PaymentDetails = {
  /**
   * UUID generated Request id
   */
  requestId: string;
  /**
   * The reference number of this order in atFawry system which is
   * displayed to the customer and used during the payment
   */
  fawryRefNumber: string;
  merchantRefNumber: string;
  customerName: string;
  customerMobile: string;
  customerMail: string;
  customerMerchantId: string;
  /**
   * The amount value received from merchant to be paid by the customer,
   * merchant can use it to verify that the customer pay the required amount
   * to enable the service to the customer
   */
  paymentAmount: number;
  /**
   * The payment Amount without the fees.
   */
  orderAmount: number;
  /**
   * The fees added by fawry for the order amount.
   */
  fawryFees: number;
  /**
   * Shipping fees amount if applicable
   */
  shippingFees?: number;
  /**
   * The updated status of your transaction.
   */
  orderStatus: OrderStatus;
  paymentMethod: PaymentMethod;
  /**
   * The actual time for the payment if the Order Status is PAID
   */
  paymentTime: Date;
  /**
   * The transaction number in the bank
   */
  authNumber?: number;
  /**
   * Unique number registered in FawryPay system to keep track of the payment
   */
  paymentRefrenceNumber?: string;
  /**
   * The order expiry in hours for this order if the merchant need to set specific
   * expiry for this order if not set we will use the configured expiry hour per merchant
   */
  orderExpiryDate: number;
  /**
   * There is some ambiguity in the docs for this part
   * see https://developer.fawrystaging.com/docs/server-apis/payment-notifications/get-payment-status-v2
   */
  orderItems: Array<{
    itemCode: string;
    price: number;
    quantity: number;
  }>;
  /**
   * "threeDSInfo" will be included only if the card is 3D secured.
   */
  threeDSInfo?: {
    /**
     * The 3-D Secure Electronic Commerce Indicator, which is set to '05'
     * when the cardholder authenticates OK, and '08' when the cardholder
     * is not enrolled. (These values may change depending on the locale or issuer).
     */
    eci: string;
    /**
     * unique transaction identifier that is generated by the merchant to identify the 3DS transaction.
     */
    xid: string;
    /**
     * This field is only included if the card is within an enrolled range.
     * It will take values (Y - Yes, N - No, U - Unavailable for Checking).
     */
    enrolled: "Y" | "N" | "U";
    /**
     * This field is only included if payment authentication was used and a PARes
     * was received by the MPI. It will take values (Y - Yes, N - No, A - Attempted
     * Authentication, U - Unavailable for Checking).
     */
    status: string;
    /**
     * A date supplied by the acquirer to indicate when this transaction will be settled.
     * If the batch has today's date then it will be settled the next day. When the acquirer
     * closes the batch at the end of the day, the date will roll over to the next processing
     * day's date.
     */
    batchNumber: string;
    /**
     * Indicates the type of transaction type. It must be equal to 'pay'.
     */
    command: string;
    message: string;
    /**
     * The Verification Security Level is generated at the card issuer as a token to prove
     * that the cardholder was enrolled and authenticated OK. It is shown for all transactions
     * except those with authentication status “Failure”. This field contains the security level
     * to be used in the AUTH message. '05' - Fully Authenticated. '06' - Not authenticated,
     * (cardholder not participating), liability shift. '07' - Not authenticated. Usually due
     * to a system problem, for example the merchant password is invalid.
     */
    verSecurityLevel: string;
    /**
     * The status codes used by the Payment Server. response code value to show whether
     * the card authentication was successful or not.
     */
    verStatus: VerStatus;
    verType: "3DS" | "SPA";
    /**
     * this value is generated by the card issuer as a token to prove that the cardholder
     * authenticated OK. This is a base64 encoded value.
     */
    verToken: string;
    /**
     * The version of the Payment Client API being used. The current version is 1.
     */
    version: string;
    /**
     * Mezza receipt number.
     */
    receiptNumber: string;
    /**
     * Hosted checkout session ID. Incase the authentication required a session id.
     */
    sessionId: string;
  };
  invoiceInfo: {
    /**
     * Number of the invoice.
     */
    number: string;
    /**
     * Business Reference Number of the invoice.
     */
    businessRefNumber: string;
    /**
     * Due Date of the invoice.
     */
    dueDate: string;
    /**
     * Expiry Date of the invoice.
     */
    expiryDate: string;
  };
  /**
   * Customer Paid amount as Interest fees
   */
  installmentInterestAmount: number;
  /**
   * Number of months for the instalment
   */
  installmentMonths: number;
  failureErrorCode: FawryStatusCode;
  failureReason: string;

  /**
   * @see {@link forPaymentDetails}
   */
  messageSignature: string;
};
